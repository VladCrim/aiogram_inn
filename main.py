import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ChatAction
import requests
from config import TELEGRAM_BOT_TOKEN, DADATA_API_KEY

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

DADATA_URL = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party"
headers = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    "Authorization": f"Token {DADATA_API_KEY}"
}


def validate_input(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –ò–ù–ù –∏–ª–∏ –û–ì–†–ù"""
    return query.isdigit() and len(query) in (10, 12, 13)


async def get_organization_info(query: str) -> str:
    try:
        response = requests.post(
            DADATA_URL,
            json={"query": query},
            headers=headers,
            timeout=5
        )
        response.raise_for_status()

        result = response.json()
        if not result.get("suggestions"):
            return "‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù/–û–ì–†–ù."

        suggestion = result["suggestions"][0]
        org_data = suggestion.get("data", {})

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        name = org_data.get("name", {}).get("short_with_opf", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        inn = org_data.get("inn", "–ù–µ —É–∫–∞–∑–∞–Ω")
        ogrn = org_data.get("ogrn", "–ù–µ —É–∫–∞–∑–∞–Ω")
        address = org_data.get("address", {}).get("value", "–ù–µ —É–∫–∞–∑–∞–Ω")
        kpp = org_data.get("kpp", "–ù–µ —É–∫–∞–∑–∞–Ω")

        info = [
            f"üè¢ *{name}*",
            f"üìã *–ò–ù–ù:* {inn}",
            f"üìÑ *–û–ì–†–ù:* {ogrn}",
            f"üìç *–ê–¥—Ä–µ—Å:* {address}",
            f"üî¢ *–ö–ü–ü:* {kpp}",
        ]

        # –£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª
        if "capital" in org_data and org_data["capital"] is not None:
            capital = org_data["capital"]
            info.append(f"üí∞ *–£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª:* {capital.get('value', '–ù–µ —É–∫–∞–∑–∞–Ω')} {capital.get('type', '')}")

        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        if "management" in org_data and org_data["management"] is not None:
            management = org_data["management"]
            info.append(
                f"üëî *–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:* {management.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')} ({management.get('post', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')})")

        # –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None)
        okveds = org_data.get("okveds") or []
        if okveds:
            main_okved = next((item for item in okveds if item and item.get("main")), None)
            if main_okved:
                info.append(f"üè≠ *–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:* {main_okved.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

        # –ú–µ—Ç—Ä–æ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None)
        metro = (org_data.get("address", {}).get("data", {}).get("metro") or [])
        if metro:
            metro_info = ["üöá *–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ:*"]
            for station in metro[:3]:
                if station:
                    metro_info.append(
                        f"- {station.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
                        f"({station.get('line', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
                        f"{station.get('distance', '?')} –∫–º)"
                    )
            info.append("\n".join(metro_info))

        return "\n".join(info)

    except requests.exceptions.RequestException as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}"
    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä) –∏–ª–∏ –û–ì–†–ù (13 —Ü–∏—Ñ—Ä).\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –ò–ù–ù: 7710137066\n"
        "- –û–ì–†–ù: 1027700132195"
    )


@dp.message(lambda message: validate_input(message.text))
async def handle_inn_or_ogrn(message: Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    info = await get_organization_info(message.text)
    await message.answer(info, parse_mode="Markdown")


@dp.message()
async def handle_invalid_input(message: Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä) –∏–ª–∏ –û–ì–†–ù (13 —Ü–∏—Ñ—Ä).\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –ò–ù–ù: 7710137066\n"
        "- –û–ì–†–ù: 1027700132195"
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())